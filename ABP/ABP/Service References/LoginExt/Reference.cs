//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ABP.LoginExt {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LogonResult", Namespace="http://schemas.datacontract.org/2004/07/ANG_ABP_AX_LOGON_INTERNAL_WCF")]
    public partial class LogonResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool AccountDisabledField;
        
        private bool CallSuccessfullField;
        
        private bool InvalidDetailsField;
        
        private string TokenField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AccountDisabled {
            get {
                return this.AccountDisabledField;
            }
            set {
                if ((this.AccountDisabledField.Equals(value) != true)) {
                    this.AccountDisabledField = value;
                    this.RaisePropertyChanged("AccountDisabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CallSuccessfull {
            get {
                return this.CallSuccessfullField;
            }
            set {
                if ((this.CallSuccessfullField.Equals(value) != true)) {
                    this.CallSuccessfullField = value;
                    this.RaisePropertyChanged("CallSuccessfull");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool InvalidDetails {
            get {
                return this.InvalidDetailsField;
            }
            set {
                if ((this.InvalidDetailsField.Equals(value) != true)) {
                    this.InvalidDetailsField = value;
                    this.RaisePropertyChanged("InvalidDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Token {
            get {
                return this.TokenField;
            }
            set {
                if ((object.ReferenceEquals(this.TokenField, value) != true)) {
                    this.TokenField = value;
                    this.RaisePropertyChanged("Token");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LoginExt.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/Logon", ReplyAction="http://tempuri.org/IService/LogonResponse")]
        System.IAsyncResult BeginLogon(string v_sUsername, string v_sPassword, string v_sAuthID, System.AsyncCallback callback, object asyncState);
        
        ABP.LoginExt.LogonResult EndLogon(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : ABP.LoginExt.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LogonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LogonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ABP.LoginExt.LogonResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ABP.LoginExt.LogonResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<ABP.LoginExt.IService>, ABP.LoginExt.IService {
        
        private BeginOperationDelegate onBeginLogonDelegate;
        
        private EndOperationDelegate onEndLogonDelegate;
        
        private System.Threading.SendOrPostCallback onLogonCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ServiceClient() : 
                base(ServiceClient.GetDefaultBinding(), ServiceClient.GetDefaultEndpointAddress()) {
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), ServiceClient.GetEndpointAddress(endpointConfiguration)) {
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<LogonCompletedEventArgs> LogonCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ABP.LoginExt.IService.BeginLogon(string v_sUsername, string v_sPassword, string v_sAuthID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogon(v_sUsername, v_sPassword, v_sAuthID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ABP.LoginExt.LogonResult ABP.LoginExt.IService.EndLogon(System.IAsyncResult result) {
            return base.Channel.EndLogon(result);
        }
        
        private System.IAsyncResult OnBeginLogon(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string v_sUsername = ((string)(inValues[0]));
            string v_sPassword = ((string)(inValues[1]));
            string v_sAuthID = ((string)(inValues[2]));
            return ((ABP.LoginExt.IService)(this)).BeginLogon(v_sUsername, v_sPassword, v_sAuthID, callback, asyncState);
        }
        
        private object[] OnEndLogon(System.IAsyncResult result) {
            ABP.LoginExt.LogonResult retVal = ((ABP.LoginExt.IService)(this)).EndLogon(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLogonCompleted(object state) {
            if ((this.LogonCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LogonCompleted(this, new LogonCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LogonAsync(string v_sUsername, string v_sPassword, string v_sAuthID) {
            this.LogonAsync(v_sUsername, v_sPassword, v_sAuthID, null);
        }
        
        public void LogonAsync(string v_sUsername, string v_sPassword, string v_sAuthID, object userState) {
            if ((this.onBeginLogonDelegate == null)) {
                this.onBeginLogonDelegate = new BeginOperationDelegate(this.OnBeginLogon);
            }
            if ((this.onEndLogonDelegate == null)) {
                this.onEndLogonDelegate = new EndOperationDelegate(this.OnEndLogon);
            }
            if ((this.onLogonCompletedDelegate == null)) {
                this.onLogonCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLogonCompleted);
            }
            base.InvokeAsync(this.onBeginLogonDelegate, new object[] {
                        v_sUsername,
                        v_sPassword,
                        v_sAuthID}, this.onEndLogonDelegate, this.onLogonCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override ABP.LoginExt.IService CreateChannel() {
            return new ServiceClientChannel(this);
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService)) {
                return new System.ServiceModel.EndpointAddress("https://abpwebtest.anglian-windows.com/ax-logon-ext-test/Service.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return ServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return ServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IService);
        }
        
        private class ServiceClientChannel : ChannelBase<ABP.LoginExt.IService>, ABP.LoginExt.IService {
            
            public ServiceClientChannel(System.ServiceModel.ClientBase<ABP.LoginExt.IService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginLogon(string v_sUsername, string v_sPassword, string v_sAuthID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = v_sUsername;
                _args[1] = v_sPassword;
                _args[2] = v_sAuthID;
                System.IAsyncResult _result = base.BeginInvoke("Logon", _args, callback, asyncState);
                return _result;
            }
            
            public ABP.LoginExt.LogonResult EndLogon(System.IAsyncResult result) {
                object[] _args = new object[0];
                ABP.LoginExt.LogonResult _result = ((ABP.LoginExt.LogonResult)(base.EndInvoke("Logon", _args, result)));
                return _result;
            }
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IService,
        }
    }
}
